
# TCP 的流量控制与拥塞控制

本文是 TCP 的可靠传输原理、流量控制与拥塞控制的笔记。

**注意，连续ARQ协议实现的是分组层面的滑动窗口，**

**TCP 和 UDP 之间的区别：**

1. TCP 是面向连接的传输层协议，应用程序在使用 TCP 协议之前，必须先建立 TCP 连接，传输数据完后，需要释放 TCP 连接。UDP 是无连接的，发送数据之前不需要建立连接，因此减少了开销和发送数据的时延。
2. 每一条 TCP 连接只能有两个端点，所以 TCP 连接是点对点的。UDP 支持一对一，一对多，多对一和多对多的相互通信
3. TCP 提供可靠交互的服务，通过 TCP 连接传送的数据，无差错，不丢失，不重复，按序到达。UDP 使用尽最大努力交付，即不保证交付可靠。
4. TCP 是面向字节流的，TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流，TCP 不关心把多长的报文发送到缓存中，而是根据对方给出的窗口和网络拥塞程度来决定一个报文段应包含多少个字节。UDP 是面向报文的，UDP 对应用层交下来的报文既不合并也不拆分，一次交付一个完整的报文。
5. TCP 有拥塞控制，UDP 没有拥塞控制，很多实时应用（IP电话，视频会议等），要求主机恒定速率发送数据，并且允许在拥塞的时候丢失数据，所以很适合 UDP。
6. UDP 首部开销小，只有8个字节。TCP 首部 20 个字节。
7. TCP 提供全双工通信，允许通信双方在任何时候发送数据，TCP 连接两端都有发送缓存和接收缓存。

<!--more-->

## TCP 的可靠传输的工作原理

### 停止等待协议

停止等待就是每发完一个分组，就停止发送，等待对方的确认，在收到确认后再发送下一个分组。

如果超过一段时间没有收到确认，就认为刚才发送的分组丢失了，因而重传刚发发送的分组，这就叫做**超时重传**

超时重传时间应当比数据在分组传输的平均往返时间更长一点。

**使用停止等待协议的信道利用率很低。**

上述这种可靠传输协议被称为**自动重传请求 ARQ**。

### 流水线传输

当使用流水线传输的时候，可以获得很高的信道利用率。

流水线传输使用**连续 ARQ 协议**和**滑动窗口协议**。

![](http://img.blog.csdn.net/20130801215525546?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2ljb2ZpZWxk/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)

**窗口单位是字节，不是报文段。**

首先，位于发送窗口内的分组都可以连续的发送出去，而不需要等待对方的确认。当所有的分组都发送出去以后，根据**连续 ARQ 协议**规定，发送方每接收到一个确认，就可以把发送窗口向前移动一个分组的位置。

## TCP 的流量控制

**利用滑动窗口实现流量控制。**

**所谓流量控制就是让发送发送速率不要过快，让接收方来得及接收。利用滑动窗口机制就可以实施流量控制。**

![](http://images.cnitblog.com/blog/153130/201308/12214258-07499554110c4fb08795049dc787c598.png)

原理这就是运用TCP报文段中的窗口大小字段来控制，发送方的发送窗口不可以大于接收方发回的窗口大小。

 从图中可以看出，B进行了三次流量控制。第一次把窗口减少到 rwnd = 300 ，第二次又减到了 rwnd = 100 ，最后减到 rwnd = 0 ，即不允许发送方再发送数据了。这种使发送方暂停发送的状态将持续到主机B重新发出一个新的窗口值为止。B向A发送的三个报文段都设置了 ACK = 1 ，只有在ACK=1时确认号字段才有意义。
    TCP为每一个连接设有一个持续计时器(persistence timer)。只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器。若持续计时器设置的时间到期，就发送一个零窗口控测报文段（携1字节的数据），那么收到这个报文段的一方就重新设置持续计时器。
    
## TCP 的拥塞控制

**所谓拥塞控制就是防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能承受现有的网络负荷。**

流量控制往往指的是点对点通信量的控制，是个端到端的问题。流量控制所要做的就是控制发送端发送数据的速率，以便使接收端来得及接受。

### 几种拥塞控制方法

因特网建议标准RFC2581定义了进行拥塞控制的四种算法，即慢开始（Slow-start)，拥塞避免（Congestion Avoidance)快重传（Fast Restrangsmit)和快回复（Fast Recovery）。

#### 慢开始和拥塞避免

发送方维持一个拥塞窗口 cwnd ( congestion window )的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞。

发送方控制拥塞窗口的原则是：只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去。但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。
    
**慢开始算法**：当主机开始发送数据时，如果立即所大量数据字节注入到网络，那么就有可能引起网络拥塞，因为现在并不清楚网络的负荷情况。因此，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是说，由小到大逐渐增大拥塞窗口数值。通常在刚刚开始发送报文段时，**先把拥塞窗口 cwnd 设置为一个最大**报文**段MSS的数值。而在每收到一个对新的报文段的确认后，把拥塞窗口增加至多一个MSS的数值**。用这样的方法逐步增大发送方的拥塞窗口 cwnd ，可以使分组注入到网络的速率更加合理。

![](http://pic002.cnblogs.com/images/2010/125788/2010101120451114.jpg)

**每经过一个传输轮次，拥塞窗口 cwnd 就加倍。**

慢开始的“慢”并不是指cwnd的增长速率慢，而是指在TCP开始发送报文段时先设置cwnd=1，使得发送方在开始时只发送一个报文段（目的是试探一下网络的拥塞情况），然后再逐渐增大cwnd。

为了防止拥塞窗口cwnd增长过大引起网络拥塞，还需要设置一个慢开始门限ssthresh状态变量（如何设置ssthresh）。慢开始门限ssthresh的用法如下：
    
* 当 cwnd < ssthresh 时，使用上述的慢开始算法。
* 当 cwnd > ssthresh 时，停止使用慢开始算法而改用拥塞避免算法。
* 当 cwnd = ssthresh 时，既可使用慢开始算法，也可使用拥塞控制避免算法。

**拥塞避免算法**：让拥塞窗口cwnd缓慢地增大，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口cwnd按线性规律缓慢增长，比慢开始算法的拥塞窗口增长速率缓慢得多。

无论在慢开始阶段还是在拥塞避免阶段，只要**发送方判断网络出现拥塞（其根据就是没有收到确认）**，就要把慢开始门限ssthresh设置为出现拥塞时的发送方窗口值的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。

![](http://pic002.cnblogs.com/images/2010/125788/2010101120591634.jpg)

### 快重传和快恢复

快重传算法首先要求接收方每收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方）而不要等到自己发送数据时才进行捎带确认。(**如果当发送端接收到三个重复的确认ACK时，则断定分组丢失，立即重传丢失的报文段，而不必等待重传计时器超时**)

采用快重传后可以使整个网络吞吐量提高约20%。
 
 ![](http://pic002.cnblogs.com/images/2010/125788/2010101122524670.jpg)

与快重传配合使用的还有快恢复算法，其过程有以下两个要点：

1. 当发送方连续收到三个重复确认，就执行“乘法减小”算法，把慢开始门限ssthresh减半。这是为了预防网络发生拥塞。请注意：接下去不执行慢开始算法。
2. 由于发送方现在认为网络很可能没有发生拥塞，因此与慢开始不同之处是现在不执行慢开始算法（即拥塞窗口cwnd现在不设置为1），而是把cwnd值设置为慢开始门限ssthresh减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。

![](http://pic002.cnblogs.com/images/2010/125788/2010101123101842.jpg)

区别：新的 TCP Reno 版本在快重传之后采用快恢复算法而不是采用慢开始算法。








JSON和JavaScript确实存在渊源，可以说这种数据格式是从JavaScript对象中演变出来的，它是JavaScript的一个子集。JSON本身的意思就是JavaScript对象表示法（JavaScript Object Notation），它用严格的JavaScript对象表示法来表示结构化的数据。

# JavaScript 与 JSON

JSON和JavaScript确实存在渊源，可以说这种数据格式是从JavaScript对象中演变出来的，它是JavaScript的一个子集。JSON本身的意思就是JavaScript对象表示法（JavaScript Object Notation），它用严格的JavaScript对象表示法来表示结构化的数据。

**并不是只有 JavaScript 才能使用 JSON，JSON 只是一种数据格式。**

JSON 的语法可以表示下面三种类型的值：

* **简单值**：在 JSON 中，简单只可以是 **字符串、数值、布尔值、null**。JSON 不支持 `undefined` 和 函数。**JSON**中字符串必须使用双引号，单引号会导致语法错误。
* **对象**：对象是一种复杂的数据类型，表示的是一组无序的键值对，键值对中的值可以是简单值，也可以是复杂的数据类型。
* **数组**：数组是一种复杂的数据类型，表示一组有序的简单值，或者对象，或者数组列表。

<!--more-->

**JSON 中所有的属性都需要加上引号！**但是 JavaScript 在定义对象字面量的时候不需要加引号：

```
let person = {
    name: "Z",
    age: 20,
}
```

转化为 JSON 就是：

```
{
    "name": "Z",
    "age": 20   //  末尾不能有分号
}
```

### JSON 的解析和序列化

可以使用 `JSON` 来将一个 JavaScript 对象解析成 String 类型的数据结构，也可以将 JSON 数据结构解析成 JavaScript 对象。

在 ECMAScript 5 中定义了全局对象 `JSON`（注意：`JSON` 是一个对象，而不是类），在 JavaScript 中也没有 JSON 这个数据类型。`JSON` 里面有两个方法：

1. `JSON.parse(str)`： 将一个 String 类型的 JSON 数据结构解析为 JavaScript 对象
2. `JSON.stringify(obj)`：将一个JavaScript 对象序列化为 JSON 数据结构。



#### JSON.parse(str)

```
JSON.parse(text[, reviver])
```

`text`: The string to parse as JSON. See the JSON object for a description of JSON syntax.
`reviver`: Optional, If a function, prescribes how the value originally produced by parsing is transformed, before being returned.


##### Return value

The Object corresponding to the given JSON text.

##### Exceptions

Throws a SyntaxError exception if the string to parse is not valid JSON.

##### Examples

例子如下：

```
JSON.parse('{}');              // {}
JSON.parse('true');            // true
JSON.parse('"foo"');           // "foo"
JSON.parse('[1, 5, "false"]'); // [1, 5, "false"]
JSON.parse('null');            // null
```

针对 reviver，也就是对每一个属性进行处理的例子：

```
JSON.parse('{"p": 5}', (key, value) =>
  typeof value === 'number'
    ? value * 2 // return value * 2 for numbers
    : value     // return everything else unchanged
);
```

```
JSON.parse('{"1": 1, "2": 2, "3": {"4": 4, "5": {"6": 6}}}', (key, value) => {
  console.log(key); // log the current property name, the last is "".
  return value;     // return the unchanged property value.
});
```

#### JSON.stringify(obj)

```
JSON.stringify(value[, replacer[, space]])
```

`value`: The value to convert to a JSON string. // value 指的就是需要转换成字符串的 JavaScript 对象

`replacer`: Optional, A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.  // 第二个参数是一个函数，表示在 JavaScript 对象转换为字符串的时候，针对每一个属性的处理方法，也就是一个过滤器，或者传入一个数组，只有数组中的属性才会被转换成字符串。

`space`: Optional, A String or Number object that's used to insert white space into the output JSON string for readability purposes. If this is a Number, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just 10). Values less than 1 indicate that no space should be used. If this is a String, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is null), no white space is used. // 第三个参数指定在输出的字符串中是否要保留缩进，以及如何保留缩进。如果参数是一个数值，则表示每个缩进的空格数，空格数量不能超过10。如果这个参数是一个字符串，则这个字符串就作为缩进进行输出。如果这个参数不赋值，则不会输出空格。

**注意，如果传入的对象就是简单值，则 `JSON.stringify()` 返回的值也是字符串化的简单值。由于 JSON 中没有 `undefined` 和 `function`，如果传入的对象属性中如果包含这两个种类型，则序列化的时候会跳过该属性。**

```
JSON.stringify({});                  // '{}'
JSON.stringify(true);                // 'true'
JSON.stringify('foo');               // '"foo"'
JSON.stringify([1, 'false', false]); // '[1,"false",false]'
JSON.stringify({ x: 5 });            // '{"x":5}'

JSON.stringify(new Date(2006, 0, 2, 15, 4, 5)) 
// '"2006-01-02T15:04:05.000Z"'

JSON.stringify({ x: 5, y: 6 });
// '{"x":5,"y":6}' or '{"y":6,"x":5}'
JSON.stringify([new Number(1), new String('false'), new Boolean(false)]);
// '[1,"false",false]'

JSON.stringify({ x: [10, undefined, function(){}, Symbol('')] }); 
// '{"x":[10,null,null,null]}' 
 
// Symbols:
JSON.stringify({ x: undefined, y: Object, z: Symbol('') });
// '{}'
JSON.stringify({ [Symbol('foo')]: 'foo' });
// '{}'
JSON.stringify({ [Symbol.for('foo')]: 'foo' }, [Symbol.for('foo')]);
// '{}'
JSON.stringify({ [Symbol.for('foo')]: 'foo' }, function(k, v) {
  if (typeof k === 'symbol') {
    return 'a symbol';
  }
});
// '{}'

// Non-enumerable properties:
JSON.stringify( Object.create(null, { x: { value: 'x', enumerable: false }, y: { value: 'y', enumerable: true } }) );
// '{"y":"y"}'
```

#### toJSON 方法

```
let book = {
    name: "JS You Don't Know",
    year: 2012,
    toJSON: function() {
        return this.name;
    }
}
```

可以在 JavaScript 对象中定义 `toJSON()` 方法，表示这个对象应该怎么被序列化。当调用 `JSON.stringify()` 方法的时候，按照下面的顺序进行序列化：

1. 如果有 `toJSON()` 方法，并且返回有效值，则调用该方法，否则返回对象本身。
2. 如果提供第二个参数，则应用这个函数过滤器，传入过滤器的参数的值是(1)返回的值
3. 对 (2) 返回的值进行序列化
4. 如果提供了第三个参数，则执行对应的格式化